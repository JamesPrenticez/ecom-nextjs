datasource db {
  // Development
  provider = "sqlite"
  url      = "file:./dev.db"
  // Production
  // provider = "postgresql"
  // url      = process.env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model account {
  id                  String  @id @default(cuid())
  user_id             String
  type                String
  provider            String
  provider_account_id String
  refresh_token       String? 
  access_token        String?  
  expires_at          Int?
  token_type          String?
  scope               String?
  id_token            String?  
  session_state       String?
  oauth_token_secret  String?
  oauth_token         String?
  user user @relation(fields: [user_id], references: [id], onDelete: Cascade)
  @@unique([provider, provider_account_id])
}

model session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  expires      DateTime
  user_id      String
  user         user     @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

model verification_token {
  identifier String
  token      String   @unique
  expires    DateTime
  @@unique([identifier, token])
}

model user {
  id                String  @id @default(cuid())
  first_name        String?
  last_name         String
  email             String? @unique
  email_verified    Boolean
  phone_number      String
  image             String
  account           account[]
  session           session[]
  address           user_address[]
  user_cart_item    user_cart_item[]
  user_ordered_item user_ordered_item[]
}

model user_address {
  id            String  @id @default(cuid())
  user_id       String
  user          user    @relation(fields: [user_id], references: [id], onDelete: Cascade)
  street_number String?
  street_name   String?
  suburb        String?
  city          String?
  state         String?
  country       String?
  postal_code   String?
}

model user_cart_item {
  id          String  @id @default(cuid())
  user_id     String
  user        user    @relation(fields: [user_id], references: [id], onDelete: Cascade)
  product_id  String
  product     product  @relation(fields: [product_id], references: [id], onDelete: Cascade)
  qantity     Int
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt
}

model user_ordered_item {
  id                String  @id @default(cuid())
  user_id           String
  user              user    @relation(fields: [user_id], references: [id], onDelete: Cascade)
  product_id        String
  product           product  @relation(fields: [product_id], references: [id], onDelete: Cascade)
  color             String
  qantity           Int
  paid              Boolean
  shipped           Boolean
  delivered         Boolean
  created_at        DateTime @default(now())
  updated_at        DateTime @updatedAt
}

model product {
  id                  String @id @default(cuid())
  image               String?
  name                String? @unique
  slug                String? @unique
  category            String?
  brand               String
  description         String
  colors              String
  price               Float?
  num_in_stock        Int?
  reviews             review[]
  user_cart_item      user_cart_item[]
  user_ordered_item   user_ordered_item[]
  created_at          DateTime @default(now())
  updated_at          DateTime @updatedAt
  published           Boolean @default(false)
}

model review {
  id           String @id @default(cuid())
  name         String?
  email        String?
  content      String?
  rating       Float?
  approved     Boolean @default(false)
  created_at   DateTime @default(now())
  updated_at   DateTime @updatedAt
  product_id   String?
  product      product? @relation(fields: [product_id], references: [id])
}