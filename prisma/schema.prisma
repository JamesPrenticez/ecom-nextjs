datasource db {
  // Development
  provider = "sqlite"
  url      = "file:./dev.db"
  // Production
  // provider = "postgresql"
  // url      = process.env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String? 
  access_token       String?  
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime
  @@unique([identifier, token])
}

model User {
  id            String   @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
}

model Product {
  id          String @id @default(cuid())
  image       String?
  name        String? @unique
  slug        String? @unique
  category    String?
  brand       String
  description String
  color       String
  price       Int?
  numInStock  Int?
  reviews     Review[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  published   Boolean @default(false)
}

model Review {
  id           String @id @default(cuid())
  name         String?
  email        String?
  content      String?
  rating       Int?
  approved     Boolean @default(false)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  product      Product? @relation(fields: [productId], references: [id])
  productId    String?
}